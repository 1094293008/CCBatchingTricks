{
  "ver": "1.0.25",
  "uuid": "6523bbec-f361-4bc4-a709-e9af80177038",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 resolution;\nuniform vec4 metaballs[500];\nvoid main () {\n  float x = v_uv0.x * resolution.x;\nfloat y = resolution.y - v_uv0.y * resolution.y;\nfloat v = 0.0;\nfor(int i = 0;i < 1;i++){\n  vec4 mb = metaballs[i];\n  float cx = mb.x - x;\n  float cy = mb.y - y;\n  float r = mb.z;\n  float ss = r * r / (cx * cx + cy * cy);\n  v += step(0.99, ss);\n}\nif(v >= 1.0 && y <= resolution[3]){\n  gl_FragColor = vec4(0.0,141.0/255.0,255.0/255.0,1.0);\n}else{\n  gl_FragColor = vec4(1.0,0.0,0.0,0.0);\n}\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform ARGS{\nvec4 resolution;\nvec4 metaballs[500];\n};\nvoid main () {\n  float x = v_uv0.x * resolution.x;\nfloat y = resolution.y - v_uv0.y * resolution.y;\nfloat v = 0.0;\nfor(int i = 0;i < 1;i++){\n  vec4 mb = metaballs[i];\n  float cx = mb.x - x;\n  float cy = mb.y - y;\n  float r = mb.z;\n  float ss = r * r / (cx * cx + cy * cy);\n  v += step(0.99, ss);\n}\nif(v >= 1.0 && y <= resolution[3]){\n  gl_FragColor = vec4(0.0,141.0/255.0,255.0/255.0,1.0);\n}else{\n  gl_FragColor = vec4(1.0,0.0,0.0,0.0);\n}\n}"
      }
    }
  ],
  "subMetas": {}
}