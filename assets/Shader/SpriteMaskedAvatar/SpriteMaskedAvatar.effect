// Copyright 2020 Cao Gaoting<caogtaa@gmail.com>
// https://caogtaa.github.io
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT

/*
 * Date: 2020-07-22 01:42:00
 * LastEditors: GT<caogtaa@gmail.com>
 * LastEditTime: 2020-07-22 14:03:48
*/ 
 
CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        mask: { value: white }
        alphaThreshold: { value: 0.5 }
}%
 
 
CCProgram vs %{
  precision highp float;
 
  #include <cc-global>
  #include <cc-local>
 
  in vec3 a_position;
  in vec2 a_mask_uv;
  in vec2 a_uv0;
  in vec2 a_xmap; // useless remove later
  in vec2 a_ymap; // useless remove later
  out vec2 v_uv0;
  out vec2 v_mask_uv;
  out vec2 v_xmap;
  out vec2 v_ymap;
 
  void main () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
 
    v_uv0 = a_uv0;
    v_mask_uv = a_mask_uv;
    // v_xmap = a_xmap;
    // v_ymap = a_ymap; 
    gl_Position = pos;
  }
}%
 
 
CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>
  #include <cc-local>
 
  in vec2 v_mask_uv;
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform sampler2D mask;
  uniform UARGS {
    float enableMask;
  };

  void main () {
    vec2 uv = v_uv0.xy;
    vec4 col = texture(texture, uv);

    vec4 maskCol = texture(mask, v_mask_uv);
    col.a = 1.0 - enableMask * step(0.01, length(maskCol - vec4(0., 0., 0., 1.)));
 
    gl_FragColor = col;
  }
}%
 
